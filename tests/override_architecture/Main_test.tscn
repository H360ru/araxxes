[gd_scene load_steps=9 format=2]

[ext_resource path="res://tests/override_architecture/AutoloadUnit.tscn" type="PackedScene" id=1]
[ext_resource path="res://tests/hex_grid/tileset.tres" type="TileSet" id=2]
[ext_resource path="res://modules/navigation_grid.gd" type="Script" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


func _ready():
#	var server = Node.new()
#	server.name = 'Server'
#	yield(get_tree(),\"idle_frame\")
#	Global.get_tree().get_root().add_child(server)
	Network.create_client()
	
#	var server = load('res://Server/Server.tscn').instance()
#	server.login_name = '_login_name'
##	server.server_mode = 0
#	yield(get_tree(),\"idle_frame\")
#	Global.get_tree().get_root().add_child(server)
#	server.create_client()


"

[sub_resource type="GDScript" id=2]
script/source = "extends Node2D

onready var team = $\"../Team\"
onready var actor = $\"../Actor\"
onready var grid = $\"../NavigationGrid\"

var unit = 0

func _ready():
	yield(get_tree(), \"idle_frame\")
	actor.unit = team.get_child(unit)
	var u1 = team.get_child(0)
	var u2 = team.get_child(1)
	actor.SIdle()
	u1.grid_position = Vector2(2, 1)
	u1.position = grid.get_cell_center_local(u1.grid_position)
	u2.grid_position = Vector2(10, 1)
	u2.position = grid.get_cell_center_local(u2.grid_position)
	
func _process(delta):
	if actor.state == actor.States.IDLE:
		if Input.is_action_just_pressed(\"mouse_left\"):
#			actor.clear_path()
#			var path = grid.find_pixel_path(actor.unit.grid_position, grid.world_to_map(get_local_mouse_position()))
#			for i in path:
#				actor.add_path_point(i)
			rpc('_set_path', actor.unit.grid_position, grid.world_to_map(get_local_mouse_position()))
			
		if Input.is_action_just_pressed(\"ui_select\"):
#			actor.move_path()
			actor.rpc('move_path')
			
		if Input.is_action_just_pressed(\"ui_right\"):
#			unit = (unit+1)%team.get_child_count()
#			actor.unit = team.get_child(unit)
			rpc('_change_team')
	
	update()

func _draw():
	if len(actor.get_path_points()) > 1:
		draw_polyline(actor.get_path_points(), Color.red)

remotesync func _change_team():
	unit = (unit+1)%team.get_child_count()
	actor.unit = team.get_child(unit)

remotesync func _set_path(_unit_grid_position, _mouse_grid_position):
	actor.clear_path()
	var path = grid.find_pixel_path(_unit_grid_position, _mouse_grid_position)
	for i in path:
		actor.add_path_point(i)

func _on_Actor_idled():
	if actor != null and actor.unit != null:
		actor.unit.grid_position = grid.world_to_map(actor.unit.position)
"

[sub_resource type="GDScript" id=3]
script/source = "extends Node

enum States{
	IDLE,
	MOVING,
}

signal idled
signal launched

export var speed:int = 200 # pixels per second

onready var _path:Path2D = $Path
onready var _itinerary:PathFollow2D = $Path/PathFollow
onready var _tween:Tween = $Tween

var unit:Node2D setget set_unit, get_unit # Actor unit
var state

func _ready():
	SIdle()
	
	
func SIdle():
	state = States.IDLE
	emit_signal(\"idled\")
	
	
func SMoving():
	state = States.MOVING
	emit_signal(\"launched\")
	
	
func set_unit(value:Node2D):
	unit = value as Node2D
	clear_path()
	
	
func get_unit():
	return unit


func clear_path():
	_path.curve.clear_points()
	if unit != null:
		add_path_point(unit.position)


func add_path_point(point:Vector2, smooth_grade=0.3):
	if _path.curve.get_point_count() > 1:
		_path.curve.add_point(point)
		var ind = _path.curve.get_point_count()-1
		var last_ind = ind-1
		# Make it smooth
		_path.curve.set_point_in(ind, -(point-_path.curve.get_point_position(last_ind))*smooth_grade)
		_path.curve.set_point_out(ind, -_path.curve.get_point_in(ind))
	else:
		_path.curve.add_point(point)



func get_path_points():
	if _path != null:
		return _path.curve.get_baked_points()
	return []


remotesync func move_path():
	if _path.curve.get_point_count() > 1:
		var time = _path.curve.get_baked_length()/speed
		_tween.interpolate_property(_itinerary, \"unit_offset\", 0.0, 1.0, time, Tween.TRANS_SINE)
		SMoving()
		_tween.start()


func _on_Tween_tween_step(object, key, elapsed, value):
	unit.position = _itinerary.position


func _on_Tween_tween_completed(object, key):
	SIdle()
	clear_path()
"

[sub_resource type="Curve2D" id=4]
_data = {
"points": PoolVector2Array(  )
}

[sub_resource type="Curve2D" id=5]
_data = {
"points": PoolVector2Array( -82.4069, 37.4577, 82.4069, -37.4577, 438.656, 186.527, -80.0875, -37.9496, 80.0875, 37.9496, 602.581, 187.418, 0, 0, 0, 0, 685.435, 135.746, 0, 0, 0, 0, 770.07, 185.637, 0, 0, 0, 0, 853.815, 238.2, 0, 0, 0, 0, 855.435, 329.019, 0, 0, 0, 0, 856.184, 434.65, 0, 0, 0, 0, 856.593, 513.656 )
}

[node name="Units" type="Node2D"]
position = Vector2( 0.943909, 1.88776 )
script = SubResource( 1 )
__meta__ = {
"_edit_group_": true
}

[node name="NavigationGrid" type="TileMap" parent="."]
tile_set = ExtResource( 2 )
cell_size = Vector2( 82, 94 )
cell_half_offset = 1
cell_tile_origin = 1
centered_textures = true
format = 1
tile_data = PoolIntArray( 1, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 6, 0, 0, 7, 0, 0, 8, 0, 0, 9, 0, 0, 10, 0, 0, 11, 0, 0, 65537, 0, 0, 65538, 0, 0, 65539, 0, 0, 65540, 0, 0, 65541, 0, 0, 65542, 0, 0, 65543, 0, 0, 65544, 0, 0, 65545, 0, 0, 65546, 0, 0, 65547, 0, 0, 131073, 0, 0, 131074, 0, 0, 131075, 0, 0, 131076, 0, 0, 131077, 8, 0, 131078, 0, 0, 131079, 8, 0, 131080, 0, 0, 131081, 0, 0, 131082, 0, 0, 131083, 0, 0, 196609, 0, 0, 196610, 0, 0, 196611, 0, 0, 196612, 8, 0, 196613, 8, 0, 196614, 8, 0, 196615, 8, 0, 196616, 8, 0, 196617, 0, 0, 196618, 0, 0, 196619, 0, 0, 262145, 0, 0, 262146, 0, 0, 262147, 0, 0, 262148, 8, 0, 262149, 0, 0, 262150, 8, 0, 262151, 0, 0, 262152, 0, 0, 262153, 0, 0, 262154, 0, 0, 262155, 0, 0, 327682, 0, 0, 327684, 0, 0, 327686, 0, 0, 327688, 0, 0, 327690, 0, 0 )
script = ExtResource( 3 )
obstacles_ids = PoolIntArray( 8 )

[node name="Control" type="Node2D" parent="."]
script = SubResource( 2 )

[node name="Team" type="Node" parent="."]

[node name="UnitBlue" parent="Team" instance=ExtResource( 1 )]

[node name="UnitRed" parent="Team" instance=ExtResource( 1 )]

[node name="Actor" type="Node" parent="."]
script = SubResource( 3 )
speed = 150

[node name="Path" type="Path2D" parent="Actor"]
curve = SubResource( 4 )

[node name="PathFollow" type="PathFollow2D" parent="Actor/Path"]
rotate = false

[node name="Tween" type="Tween" parent="Actor"]

[node name="Path2D" type="Path2D" parent="."]
curve = SubResource( 5 )

[connection signal="idled" from="Actor" to="Control" method="_on_Actor_idled"]
[connection signal="tween_completed" from="Actor/Tween" to="Actor" method="_on_Tween_tween_completed"]
[connection signal="tween_step" from="Actor/Tween" to="Actor" method="_on_Tween_tween_step"]
