[gd_scene load_steps=8 format=2]

[ext_resource path="res://tests/hex_grid/tileset.tres" type="TileSet" id=1]
[ext_resource path="res://modules/navigation_grid.gd" type="Script" id=2]
[ext_resource path="res://modules/UnitSystem/units_group.gd" type="Script" id=3]
[ext_resource path="res://modules/UnitSystem/player.gd" type="Script" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

export(NodePath) var grid_path
export(NodePath) var player_path
export(NodePath) var units_path
export(NodePath) var control_path

onready var grid = get_node_or_null(grid_path)
onready var player = get_node_or_null(player_path)
onready var units = get_node_or_null(units_path)
onready var control = get_node_or_null(control_path)

func _process(delta):
	update()
	
func _draw():
	if player != null and player.unit != null:
		draw_circle(player.unit.global_position-global_position, 25.0, Color(0.0, 1.0, 0.0, 0.3))
		
	for i in units.get_units_in_group(control.player_group):
		draw_circle(to_local(grid.get_cell_center_global(i.map_position)), 15.0, Color.green if i.is_active() else Color.black)
		
	for i in units.get_units_in_group(control.enemy_group):
		draw_circle(to_local(grid.get_cell_center_global(i.map_position)), 15.0, Color.red if i.is_active() else Color.black)
		
	match control.state:
		control.States.READY:
			if player.get_unit_path_point_count() > 0:
				draw_polyline(player.get_baked_path_points(), Color.green, 2.0, true)
			for i in control.move_area:
				draw_circle(grid.get_cell_center_global(i), 10.0, Color(0.0, 1.0, 0.0, 0.3))
		control.States.TARGETING:
			draw_line(player.unit.global_position-global_position, player.get_global_aim(), Color.red, 2.0, true)
"

[sub_resource type="GDScript" id=2]
script/source = "extends Node

var robot:PackedScene = preload(\"res://tests/unit_system_new_new/Unit1.tscn\")

onready var units:UnitsGroup = $\"../Units\"
onready var grid:NavigationGrid = $\"../Grid\"
onready var player:Player = $\"../Player\"

const player_group = \"team\"
const enemy_group = \"enemies\"

enum States{
	WAIT_PLAYER,
	READY,
	TARGETING,
	
}

var state:int
var current_group = player_group
var move_area:PoolVector2Array = PoolVector2Array()

func SReady():
	state = States.READY
	if player != null and player.unit != null:
		move_area = grid.get_map_distance_area(player.unit.map_position, player.unit.move_remains, units.get_surrounding_units_cells(player.unit))
	
func SWaitPlayer():
	state = States.WAIT_PLAYER
	
func STargeting():
	state = States.TARGETING

func _ready():
	SReady()

func _process(delta):
	var mouse_cell = grid.global_world_to_map(grid.get_global_mouse_position())
	match state:
		States.READY:
			if Input.is_action_just_pressed(\"mouse_left\"):
				var unit = units.get_unit_on_cell(mouse_cell)
				if unit and unit.is_in_group(current_group) and unit.is_active():
					player.unit = unit
					move_area = grid.get_map_distance_area(player.unit.map_position, player.unit.move_remains, units.get_surrounding_units_cells(player.unit))
					
				elif player.unit != null:
					if mouse_cell in move_area:
						player.clear_unit_path()
						var path = grid.find_pixel_path(player.unit.map_position, mouse_cell, units.get_surrounding_units_cells(player.unit), true)
						for i in path:
							player.add_unit_path_point(i)
				
			if Input.is_action_just_pressed(\"mouse_right\"):
				STargeting()
			
			if Input.is_action_just_pressed(\"ui_left\"):
				player.unit.disable()
				player.clear_settings()
				
			if Input.is_action_just_pressed(\"ui_right\"):
				for i in units.get_all_units():
					i.enable()
			
			if Input.is_action_just_pressed(\"ui_select\"):
				if player.unit != null and player.can_move():
					player.go_path()
					player.unit.deduct_move(max(player.get_unit_path_point_count()-1, 0))
					SWaitPlayer()
			
			if Input.is_action_just_pressed(\"ui_focus_next\"):
				current_group = player_group if current_group == enemy_group else enemy_group
				player.clear_settings()
				move_area = PoolVector2Array()

		States.TARGETING:
			var p = grid.get_cell_center_global(grid.get_map_obstacle_intersection(player.unit.map_position, mouse_cell, units.get_surrounding_units_cells(player.unit)))
			player.aim_to_point(p)
			
			# test only #######
			player.unit.sprite.direct_by_rad((p-player.unit.global_position).angle())
			###################
			
			if Input.is_action_just_pressed(\"ui_select\"):
				player.attack()
				SWaitPlayer()

func _on_Player_move_finished():
	SReady()
	print(player.unit.move_remains)
	

func _on_Player_unit_attacked():
	units.damage_unit_at_cell(grid.global_world_to_map(player.get_global_aim()), player.unit.weapon.damage)
	SReady()

func _on_Field_ready():
	units.create_unit(robot, Vector2(3, 3), player_group)
	units.create_unit(robot, Vector2(8, 4), player_group)
	units.create_unit(robot, Vector2(4, 7), enemy_group)

func _on_Units_unit_damaged(unit):
	print(unit.health)

func _on_Units_unit_out_of_health(unit):
	units.destroy_unit(unit)
"

[sub_resource type="GDScript" id=3]
script/source = "extends Camera2D


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


func _process(delta):
	if Input.is_action_pressed(\"A\"):
		position.x -= 200*delta
	if Input.is_action_pressed(\"D\"):
		position.x += 200*delta
	if Input.is_action_pressed(\"W\"):
		position.y -= 200*delta
	if Input.is_action_pressed(\"S\"):
		position.y += 200*delta
		
	if Input.is_action_just_released(\"mouse_wheel_down\"):
		if zoom.x <= 3:
			zoom *= 1.1
			
	if Input.is_action_just_released(\"mouse_wheel_up\"):
		if zoom.x >= 0.3:
			zoom /= 1.1
"

[node name="Field" type="Node"]

[node name="Grid" type="TileMap" parent="."]
position = Vector2( -318.725, -116.188 )
tile_set = ExtResource( 1 )
cell_size = Vector2( 82, 94 )
cell_half_offset = 1
cell_tile_origin = 1
centered_textures = true
format = 1
tile_data = PoolIntArray( 1, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 6, 0, 0, 7, 0, 0, 8, 0, 0, 9, 0, 0, 10, 0, 0, 11, 0, 0, 13, 0, 0, 14, 0, 0, 15, 0, 0, 17, 0, 0, 18, 0, 0, 19, 0, 0, 20, 0, 0, 21, 0, 0, 22, 0, 0, 23, 0, 0, 24, 0, 0, 25, 0, 0, 26, 0, 0, 27, 0, 0, 28, 0, 0, 29, 0, 0, 30, 0, 0, 31, 0, 0, 32, 0, 0, 33, 0, 0, 34, 0, 0, 35, 0, 0, 36, 0, 0, 37, 0, 0, 65537, 0, 0, 65538, 0, 0, 65539, 0, 0, 65540, 0, 0, 65541, 0, 0, 65542, 0, 0, 65543, 0, 0, 65544, 0, 0, 65545, 0, 0, 65546, 0, 0, 65547, 0, 0, 65548, 0, 0, 65549, 0, 0, 65550, 0, 0, 65551, 0, 0, 65552, 0, 0, 65553, 0, 0, 65554, 0, 0, 65555, 0, 0, 65556, 0, 0, 65557, 0, 0, 65558, 0, 0, 65559, 0, 0, 65560, 0, 0, 65561, 0, 0, 65562, 0, 0, 65563, 0, 0, 65564, 0, 0, 65565, 0, 0, 65566, 0, 0, 65567, 0, 0, 65568, 0, 0, 65569, 0, 0, 65570, 0, 0, 65571, 0, 0, 65572, 0, 0, 65573, 0, 0, 131073, 0, 0, 131074, 0, 0, 131075, 0, 0, 131076, 0, 0, 131077, 8, 0, 131078, 0, 0, 131079, 8, 0, 131080, 0, 0, 131081, 0, 0, 131082, 0, 0, 131083, 0, 0, 131084, 0, 0, 131085, 0, 0, 131086, 0, 0, 131087, 0, 0, 131088, 0, 0, 131089, 0, 0, 131090, 0, 0, 131091, 0, 0, 131092, 0, 0, 131093, 0, 0, 131094, 0, 0, 131095, 0, 0, 131096, 0, 0, 131097, 0, 0, 131098, 0, 0, 131099, 0, 0, 131100, 0, 0, 131101, 0, 0, 131102, 0, 0, 131103, 0, 0, 131104, 0, 0, 131105, 0, 0, 131106, 0, 0, 131107, 0, 0, 131108, 0, 0, 131109, 0, 0, 196609, 0, 0, 196610, 0, 0, 196611, 0, 0, 196612, 8, 0, 196613, 8, 0, 196614, 8, 0, 196615, 8, 0, 196616, 8, 0, 196617, 0, 0, 196618, 0, 0, 196619, 0, 0, 196620, 0, 0, 196621, 8, 0, 196622, 0, 0, 196623, 0, 0, 196624, 0, 0, 196625, 8, 0, 196626, 0, 0, 196627, 0, 0, 196628, 0, 0, 196629, 0, 0, 196630, 0, 0, 196631, 0, 0, 196632, 0, 0, 196633, 0, 0, 196634, 0, 0, 196635, 0, 0, 196636, 0, 0, 196637, 0, 0, 196638, 0, 0, 196639, 0, 0, 196640, 0, 0, 196641, 8, 0, 196642, 0, 0, 196643, 0, 0, 196644, 0, 0, 196645, 0, 0, 262145, 0, 0, 262146, 0, 0, 262147, 0, 0, 262148, 8, 0, 262149, 0, 0, 262150, 8, 0, 262151, 0, 0, 262152, 0, 0, 262153, 0, 0, 262154, 0, 0, 262155, 8, 0, 262156, 8, 0, 262157, 8, 0, 262158, 0, 0, 262159, 0, 0, 262160, 0, 0, 262161, 8, 0, 262162, 8, 0, 262163, 0, 0, 262164, 0, 0, 262165, 0, 0, 262166, 0, 0, 262167, 0, 0, 262168, 0, 0, 262169, 0, 0, 262170, 0, 0, 262171, 0, 0, 262172, 0, 0, 262173, 0, 0, 262174, 0, 0, 262175, 8, 0, 262176, 8, 0, 262177, 8, 0, 262178, 8, 0, 262179, 0, 0, 262180, 0, 0, 262181, 0, 0, 327681, 0, 0, 327682, 0, 0, 327683, 0, 0, 327684, 0, 0, 327685, 0, 0, 327686, 0, 0, 327687, 0, 0, 327688, 0, 0, 327689, 8, 0, 327690, 8, 0, 327691, 8, 0, 327692, 8, 0, 327693, 8, 0, 327694, 0, 0, 327695, 0, 0, 327696, 0, 0, 327697, 8, 0, 327698, 8, 0, 327699, 0, 0, 327700, 0, 0, 327701, 0, 0, 327702, 0, 0, 327703, 0, 0, 327704, 0, 0, 327705, 0, 0, 327706, 0, 0, 327707, 0, 0, 327708, 0, 0, 327709, 0, 0, 327710, 8, 0, 327711, 8, 0, 327712, 8, 0, 327713, 0, 0, 327714, 0, 0, 327715, 0, 0, 327716, 0, 0, 327717, 0, 0, 393217, 0, 0, 393218, 0, 0, 393219, 0, 0, 393220, 0, 0, 393221, 0, 0, 393222, 0, 0, 393223, 8, 0, 393224, 0, 0, 393225, 8, 0, 393226, 8, 0, 393227, 0, 0, 393228, 0, 0, 393229, 8, 0, 393230, 8, 0, 393231, 8, 0, 393232, 8, 0, 393233, 0, 0, 393234, 0, 0, 393235, 0, 0, 393236, 0, 0, 393237, 0, 0, 393238, 0, 0, 393239, 0, 0, 393240, 0, 0, 393241, 0, 0, 393242, 0, 0, 393243, 0, 0, 393244, 0, 0, 393245, 8, 0, 393246, 8, 0, 393247, 0, 0, 393248, 0, 0, 393249, 0, 0, 393250, 0, 0, 393251, 0, 0, 393252, 0, 0, 393253, 0, 0, 458753, 0, 0, 458754, 0, 0, 458755, 0, 0, 458756, 0, 0, 458757, 8, 0, 458758, 8, 0, 458759, 0, 0, 458760, 8, 0, 458761, 0, 0, 458762, 8, 0, 458763, 8, 0, 458764, 0, 0, 458765, 8, 0, 458766, 0, 0, 458767, 8, 0, 458768, 0, 0, 458769, 0, 0, 458770, 0, 0, 458771, 0, 0, 458772, 0, 0, 458773, 0, 0, 458774, 0, 0, 458775, 0, 0, 458776, 0, 0, 458777, 0, 0, 458778, 0, 0, 458779, 0, 0, 458780, 0, 0, 458781, 8, 0, 458782, 0, 0, 458783, 0, 0, 458784, 0, 0, 458785, 0, 0, 458786, 0, 0, 458787, 0, 0, 458788, 0, 0, 458789, 0, 0, 524289, 0, 0, 524290, 0, 0, 524291, 0, 0, 524292, 0, 0, 524293, 8, 0, 524294, 8, 0, 524295, 0, 0, 524296, 0, 0, 524297, 0, 0, 524298, 0, 0, 524299, 8, 0, 524300, 0, 0, 524301, 8, 0, 524302, 8, 0, 524303, 0, 0, 524304, 8, 0, 524305, 8, 0, 524306, 0, 0, 524307, 0, 0, 524308, 0, 0, 524309, 0, 0, 524310, 0, 0, 524311, 0, 0, 524312, 0, 0, 524313, 0, 0, 524314, 0, 0, 524315, 0, 0, 524316, 0, 0, 524317, 8, 0, 524318, 0, 0, 524319, 0, 0, 524320, 0, 0, 524321, 0, 0, 524322, 0, 0, 524323, 0, 0, 524324, 0, 0, 524325, 0, 0, 589826, 0, 0, 589827, 0, 0, 589828, 0, 0, 589829, 8, 0, 589830, 0, 0, 589831, 0, 0, 589832, 0, 0, 589833, 8, 0, 589834, 8, 0, 589835, 0, 0, 589836, 0, 0, 589837, 0, 0, 589838, 0, 0, 589839, 8, 0, 589840, 8, 0, 589841, 8, 0, 589842, 8, 0, 589843, 0, 0, 589844, 0, 0, 589845, 0, 0, 589846, 0, 0, 589847, 0, 0, 589848, 0, 0, 589849, 0, 0, 589850, 0, 0, 589851, 0, 0, 589852, 0, 0, 589853, 8, 0, 589854, 0, 0, 589855, 0, 0, 589856, 0, 0, 589857, 0, 0, 589858, 0, 0, 589859, 0, 0, 589860, 0, 0, 589861, 0, 0, 655363, 0, 0, 655364, 0, 0, 655365, 8, 0, 655366, 8, 0, 655367, 0, 0, 655368, 8, 0, 655369, 0, 0, 655370, 8, 0, 655371, 0, 0, 655372, 0, 0, 655373, 0, 0, 655374, 0, 0, 655375, 8, 0, 655376, 8, 0, 655377, 0, 0, 655378, 0, 0, 655379, 0, 0, 655380, 0, 0, 655381, 0, 0, 655382, 0, 0, 655383, 0, 0, 655384, 0, 0, 655385, 0, 0, 655386, 0, 0, 655387, 0, 0, 655388, 0, 0, 655389, 0, 0, 655390, 8, 0, 655391, 8, 0, 655392, 0, 0, 655393, 0, 0, 655394, 0, 0, 655395, 0, 0, 655396, 0, 0, 655397, 0, 0, 720899, 0, 0, 720900, 0, 0, 720901, 0, 0, 720902, 8, 0, 720903, 8, 0, 720904, 0, 0, 720905, 0, 0, 720906, 0, 0, 720907, 8, 0, 720908, 0, 0, 720909, 0, 0, 720910, 0, 0, 720911, 0, 0, 720912, 0, 0, 720913, 0, 0, 720914, 0, 0, 720915, 0, 0, 720916, 0, 0, 720917, 0, 0, 720918, 0, 0, 720919, 0, 0, 720920, 0, 0, 720921, 8, 0, 720922, 0, 0, 720923, 8, 0, 720924, 0, 0, 720925, 8, 0, 720926, 8, 0, 720927, 0, 0, 720928, 0, 0, 720929, 0, 0, 720930, 0, 0, 720931, 0, 0, 720932, 0, 0, 720933, 0, 0, 786436, 0, 0, 786437, 0, 0, 786438, 0, 0, 786439, 0, 0, 786440, 8, 0, 786441, 8, 0, 786442, 8, 0, 786443, 0, 0, 786444, 0, 0, 786445, 0, 0, 786446, 0, 0, 786447, 0, 0, 786448, 0, 0, 786449, 0, 0, 786450, 0, 0, 786451, 0, 0, 786452, 0, 0, 786453, 0, 0, 786454, 0, 0, 786455, 0, 0, 786456, 0, 0, 786457, 0, 0, 786458, 8, 0, 786459, 0, 0, 786460, 8, 0, 786461, 0, 0, 786462, 0, 0, 786463, 0, 0, 786464, 0, 0, 786465, 0, 0, 786466, 0, 0, 786467, 0, 0, 786468, 0, 0, 786469, 0, 0, 851973, 0, 0, 851974, 0, 0, 851975, 0, 0, 851976, 0, 0, 851977, 0, 0, 851978, 0, 0, 851979, 0, 0, 851980, 0, 0, 851981, 0, 0, 851982, 0, 0, 851983, 0, 0, 851984, 0, 0, 851985, 0, 0, 851986, 0, 0, 851987, 0, 0, 851988, 0, 0, 851989, 0, 0, 851990, 0, 0, 851991, 0, 0, 851992, 0, 0, 851993, 0, 0, 851994, 0, 0, 851995, 0, 0, 851996, 0, 0, 851997, 0, 0, 851998, 0, 0, 851999, 0, 0, 852000, 0, 0, 852001, 0, 0, 852002, 0, 0, 852003, 0, 0, 852004, 0, 0, 852005, 0, 0, 917510, 0, 0, 917512, 0, 0, 917513, 0, 0, 917514, 0, 0, 917515, 0, 0, 917516, 0, 0, 917517, 0, 0, 917518, 0, 0, 917520, 0, 0, 917521, 0, 0, 917522, 0, 0, 917523, 0, 0, 917524, 0, 0, 917525, 0, 0, 917526, 0, 0, 917527, 0, 0, 917528, 0, 0, 917529, 0, 0, 917530, 0, 0, 917531, 0, 0, 917532, 0, 0, 917533, 0, 0, 917534, 0, 0, 917535, 0, 0, 917536, 0, 0, 917537, 0, 0, 917538, 0, 0, 917539, 0, 0, 917540, 0, 0, 917541, 0, 0 )
script = ExtResource( 2 )
obstacles_ids = PoolIntArray( 8 )

[node name="Player" type="Node" parent="."]
script = ExtResource( 4 )
grid_node_path = NodePath("../Grid")

[node name="Drawer" type="Node2D" parent="."]
script = SubResource( 1 )
grid_path = NodePath("../Grid")
player_path = NodePath("../Player")
units_path = NodePath("../Units")
control_path = NodePath("../Control")

[node name="Control" type="Node" parent="."]
script = SubResource( 2 )

[node name="Units" type="Node2D" parent="."]
script = ExtResource( 3 )
navigation_grid_path = NodePath("../Grid")

[node name="Camera2D" type="Camera2D" parent="."]
current = true
zoom = Vector2( 2, 2 )
smoothing_enabled = true
script = SubResource( 3 )

[connection signal="ready" from="." to="Control" method="_on_Field_ready"]
[connection signal="move_finished" from="Player" to="Control" method="_on_Player_move_finished"]
[connection signal="unit_attacked" from="Player" to="Control" method="_on_Player_unit_attacked"]
[connection signal="unit_damaged" from="Units" to="Control" method="_on_Units_unit_damaged"]
[connection signal="unit_out_of_health" from="Units" to="Control" method="_on_Units_unit_out_of_health"]
